* TODO
** TODO Save on change focus
** TODO Org Indent Mode by default
** TODO Vim Surround
** TODO Follow Symlinks By Default
* Personalization
** Welcome Message

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message
	(concat
	 ";; This buffer is for text that is not saved, and for Lisp evaluation.\n"
	 ";; To create a file, visit it with C-x C-f and enter text in its buffer.\n"
	 ";;\n"
	 ";; __          __  _                            \n"
	 ";; \\ \\        / / | |                           \n"
	 ";;  \\ \\  /\\  / /__| | ___ ___  _ __ ___   ___   \n"
	 ";;   \\ \\/  \\/ / _ \\ |/ __/ _ \\| '_ ` _ \\ / _ \\  \n"
	 ";;    \\  /\\  /  __/ | (_| (_) | | | | | |  __/_ \n"
	 ";;     \\/  \\/ \\___|_|\\___\\___/|_| |_| |_|\\___(_)\n"))

  ;; Leave this here, or package.el will just add it again.

#+END_SRC

** Window Settings

Hide a bunch of gui things

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1) 

  ;; Hide the scrollbars in the initial frame
  (scroll-bar-mode -1)
  ;; Hide the scrollbars in frames created by the server
  (add-hook 'server-after-make-frame-hook (lambda () (scroll-bar-mode -1)))
#+END_SRC

** Font Size

At the moment I am happy using the default font (DejaVu Sans Mono) on my system.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 110)
#+END_SRC

** Color Theme

#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure
    :config
    (load-theme 'dracula t))
#+END_SRC

** Leader Key

This is later bound to SPC in Evil Normal State.

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'leader-map)
#+END_SRC

** Linux Specific

Hide window decorations.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)
   (setq default-frame-alist '((undecorated . t))))
#+END_SRC

** macOS Specific

Larger font and fullscreen binding.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (progn (set-face-attribute 'default nil :height 140)
           (global-set-key (kbd "C-s-f") 'toggle-frame-fullscreen)))
#+END_SRC

** Relative Line Numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (setq display-line-numbers 'relative)
#+END_SRC

* Evil Mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure
    :init
    :custom
    (evil-want-keybinding nil)
    :config
    (require 'evil)
    (define-key evil-normal-state-map (kbd "SPC") leader-map)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

* Helm

Fuzzy Search

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure
    :bind (:map leader-map
		("SPC" . helm-buffers-list)
		("F" . helm-find-files))
    :config
    (helm-mode 1))

  (use-package helm-ls-git
    :ensure
    :bind (:map leader-map
		("f" . helm-browse-project)))
#+END_SRC

* Other General Plugins
** Undo Tree

This replaces the built-in undo functionality with a more sane tree-based system.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure
    :config
    (global-undo-tree-mode))
#+END_SRC

** Git Integration

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure
    :bind (:map leader-map
		("g" . magit)))
#+END_SRC

** Completions

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure
    :custom
    (company-idle-delay 0.5) ;; how long to wait until popup
    ;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
    (:map company-active-map
	  ("C-n". company-select-next)
	  ("C-p". company-select-previous)
	  ("M-<". company-select-first)
	  ("M->". company-select-last))
    (:map company-mode-map
	  ("<tab>". tab-indent-or-complete)
	  ("TAB". tab-indent-or-complete)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	  (backward-char 1)
	  (if (looking-at "::") t nil)))))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
      (if (check-expansion)
	  (company-complete-common)
	(indent-for-tab-command))))
#+END_SRC

** Language Server

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure
    :commands lsp
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package lsp-ui
    :ensure
    :commands lsp-ui-mode
    :custom
    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-doc-enable nil))
#+END_SRC

* Language Specific
** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
		("M-j" . lsp-ui-imenu)
		("M-?" . lsp-find-references)
		("C-c C-c l" . flycheck-list-errors)
		("C-c C-c a" . lsp-execute-code-action)
		("C-c C-c r" . lsp-rename)
		("C-c C-c q" . lsp-workspace-restart)
		("C-c C-c Q" . lsp-workspace-shutdown)
		("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    (setq rustic-format-on-save t))
#+END_SRC

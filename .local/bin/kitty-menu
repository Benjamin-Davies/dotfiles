#!/usr/bin/env python3

from subprocess import run
from sys import argv
from tempfile import NamedTemporaryFile

kitty_args = '--class kitty-menu'
fzf_args = '--color fg:-1,bg:-1,hl:4,fg+:-1,bg+:-1,hl+:2'

def run_lines(args):
    p = run(args, shell=True, capture_output=True, text=True)
    return p.stdout.split('\n')

class Mode:
    def __init__(self):
        self.options = [
            ('Foo', 'foo'),
            ('Bar', 'bar'),
            ('Baz', 'baz'),
        ]

    def get_options(self):
        return (name for name, _ in self.options)

    def get_prompt(self):
        return f'{self.__class__.__name__[:-4].lower()}> '

    def use_result(self, result):
        for name, value in self.options:
            if name == result:
                return self.use_value(value)

    def use_value(self, value):
        print(value)

class RunMode(Mode):
    def __init__(self):
        self.options = [(c, c) for c in run_lines('compgen -c')]

    def use_value(self, value):
        run(value, shell=True)

class DRunMode(RunMode):
    def __init__(self):
        from glob import glob
        from itertools import chain
        from configparser import ConfigParser

        def parse_desktop_file(file):
            parser = ConfigParser(interpolation=None)
            parser.read(file)
            return (parser.get('Desktop Entry', 'Name'),
                    parser.get('Desktop Entry', 'Exec'))

        desktop_files = chain(
            glob('/usr/share/applications/*.desktop'),
            glob('/usr/local/share/applications/*.desktop'),
            glob('.local/share/applications/*.desktop'),
        )
        self.options = (parse_desktop_file(file) for file in desktop_files)

class NetMode(Mode):
    def __init__(self):
        lines = run_lines('nmcli c show')
        first_line = lines[0]
        uuid_start = first_line.index('UUID')
        uuid_end = first_line.index('TYPE')
        self.options = [(line[:uuid_start] + line[uuid_end:],
                         line[uuid_start:uuid_end-1])
                        for line in lines[1:-1]]

    def use_value(self, value):
        run(f'nmcli c up {value}', shell=True)

class ConfigMode(Mode):
    def __init__(self):
        self.options = [
            ('Bspwm', '~/.config/bspwm/bspwmrc'),
            ('Kitty', '~/.config/kitty/kitty.conf'),
            ('Kitty Menu', '~/.local/bin/kitty-menu'),
            ('Neovim', '~/.config/nvim/init.vim'),
            ('Neovim Keymaps', '~/.config/nvim/keymaps.vim'),
            ('Neovim Plugins', '~/.config/nvim/plugins.vim'),
            ('Picom', '~/.config/picom.conf'),
            ('Polybar', '~/.config/polybar/config'),
            ('Qtile', '~/.config/qtile/config.py'),
            ('SSH', '~/.ssh/config'),
            ('Sxhkd', '~/.config/sxhkd/sxhkdrc'),
            ('Tmux', '~/.tmux.conf'),
            ('XMonad', '~/.config/xmonad/xmonad.hs'),
            ('Xresources', '~/.Xresources'),
            ('Zsh', '~/.zshrc'),
            ('Scripts', '~/.local/bin/'),
        ]

    def use_value(self, value):
        run(f'kitty nvim {value}', shell=True)

class WwwMode(Mode):
    def __init__(self):
        self.options = [
            ('Bible',               (0, 'https://my.bible.com/bible/'                 )),
            ('Calendar',            (0, 'https://calendar.google.com/calendar/r'      )),
            ('Classroom',           (1, 'https://classroom.google.com/u/0/h'          )),
            ('Contacts',            (0, 'https://contacts.google.com/'                )),
            ('Discord',             (0, 'https://discordapp.com/app'                  )),
            ('DreamCatcher',        (1, 'https://app.dreamcatcher.school.nz/'         )),
            ('Education Perfect',   (1, 'https://educationperfect.com/app/'           )),
            ('Facebook',            (0, 'https://facebook.com/'                       )),
            ('Messenger',           (0, 'https://messenger.com/'                      )),
            ('GitHub',              (0, 'https://github.com/'                         )),
            ('GitLab',              (0, 'https://gitlab.com/'                         )),
            ('Gmail',               (0, 'https://mail.google.com/mail/ca/u/0/'        )),
            ('Gmail School',        (1, 'https://mail.google.com/mail/ca/u/0/'        )),
            ('Google Docs',         (0, 'https://docs.google.com/document/u/0/'       )),
            ('Google Docs School',  (1, 'https://docs.google.com/document/u/0/'       )),
            ('Google Drive',        (0, 'https://drive.google.com/drive/u/0/'         )),
            ('Google Drive School', (1, 'https://drive.google.com/drive/u/0/'         )),
            ('MMC Moodle',          (1, 'https://moodle.mmc.school.nz/login/index.php')),
            ('NeverSSL',            (0, 'http://neverssl.com/'                        )),
            ('Planning Center',     (0, 'https://planningcenteronline.com/'           )),
            ('Pushbullet',          (0, 'https://pushbullet.com/'                     )),
            ('Skype',               (0, 'https://web.skype.com/'                      )),
            ('Spotify',             (0, 'https://open.spotify.com/'                   )),
            ('WhatsApp',            (0, 'https://web.whatsapp.com/'                   )),
            ('YouTube',             (0, 'https://youtube.com/'                        )),
        ]

    def use_value(self, value):
        profile_index, url = value
        profile = 'Default' if profile_index == 0 else f'"Profile {profile_index}"'
        run(f'google-chrome-stable --new-window --profile-directory={profile} --app={url}', shell=True)


modes = {
    'test': Mode,
    'run': RunMode,
    'drun': DRunMode,
    'net': NetMode,
    'config': ConfigMode,
    'www': WwwMode,
}

if len(argv) == 5 and argv[1] == '--prompt':

    # Usage: kitty-menu --prompt <prompt> <options file> <result file>
    run(f'fzf {fzf_args} --prompt "{argv[2]}" < {argv[3]} > {argv[4]}', shell=True)

else:

    # Usage: kitty-menu
    mode = modes[argv[1]]()

    with NamedTemporaryFile(mode='w') as i, NamedTemporaryFile(mode='r') as o:
        for s in mode.get_options():
            i.write(f'{s}\n')
        i.flush()

        run(f'kitty {kitty_args} {argv[0]} --prompt "{mode.get_prompt()}" {i.name} {o.name}', shell=True)

        result = o.read()[:-1]

    mode.use_result(result)
